First of I am trying to learn OpenGL as part of my learning curriculum.
All of this will be done on macOS which uses M1 chip, and is based off of the arm64
cpu architecture, and differes from the previous chipsets that were designed and made by Intel.

Since this change there have been numerous other changes that have occured on macOS
and Apple and just one of them has been that they have decided to move away from 
OpenGL and support Metal API instead which has become their native API go to.
This also means that they have removed the support for newer versions of OpenGL
and the latest stable and up to date version on M chips macOS computers is 
OpenGL 4.1. So since OpenGL has been deprecated most people recommend learning Metal API.

Since that I will be using OpenGL core profile 4.1 so that means no fixed pipeline and
no glBegin().

I have still decided to go with learning OpenGL since it can teach me a lot about
computer graphics and rendering and shaders and all this stuff under the hood.

For that reason I will document everything here as I am learning to make myself
fully understand these things. 

So basically we will begin very simply with all of this but just creating a window
and documenting this basic setup for everything.



1. SETUP and START

We basically start by including the necessary file headers and here the only one for now will
be GLFW and glfw3 so just by typing in include<GLFW/glfw3>

Before starting with any initializations or that we need to request the a modern OpenGL
context. 

These four lines are necessary on the macOS basically because we will otherwise have issues
and things might not really render anything in return:


                glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
                glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);
                glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
                glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);


Also need to make sure we initialize the GLFW library and we do this by instantly
setting it into if(not initialized) we print the error and exit the program.
                
                if(!glfwInit()) {
                    ... error print
                    return (-1);
                }


Moving on to the next part is that we need to create a glfwWindow type struct which in this case
needs to be a pointer. We name it *window simply.

We then create that window using the following documentation:
                
                window = glfwCreateWindow(WIDTH, HEIGHT, "Title of our Window", NULL, NULL);

Now I am using WIDTH and HEIGHT defined as macros that the preprocessor will then process and replace all
of the preprocessor directives into values of those macros if that makes sense. When preprocessin occurs
everything gets replaced by those macro values so all the macros in turn for compiling the compiler sees them
as values and not HEIGHT and WIDTH. This is why it needs to be set up there. This is all handled by the preprocessor.

Now we also need to check if the window can be created and fo this we also setup a check condiition
something similar to this:

               if (!window) {
                    fprintf(stderr, "Couldn't create a window, terminating program!\n");
                    glfwTerminate();
                    return(-1);
                }

Here we need to call glfwTerminate and that is needed for freeing the pointer memory and terminating
the window itself.

Moving on next we make sure that the window taht has now successfully been created that we make sure
that taht window is the one that is active. This is important because we can maybe have multiple windows
and our glfw and program needs to know that we are giving it this perticular window pointer because
we want to make this window especially.

We might need to print the version of our OpenGL program and window taht we have just created.
Now for that we can use const char * char pointer to refer to a string in which we will store the version name.
But since OpenGL comes with its own set of data types defined by the library itself and which are the same thing
as using the standard C library data types, we can use those. This is more convenient for learning purposes
and for getting comfortable using GL data types. 

For example a char in this case that we need is GLubyte. This refers to a GL unsigned byte.
Since char data type can hold values up to 1 byte that means unsigned from 0 to 255 different values in total 256
values, this is the same thing just named differently for convenient purposes.

Finally we come to the printing part where we get to see the final work.

                while(!glfwWindowShouldClose(window)) {

                    glClearColor(0.1f, 0.5f, 0.3f, 0.8f);
                    glClear(GL_COLOR_BUFFER_BIT);

                    glfwSwapBuffers(window);

                    glfwPollEvents();
            }

These four lins of code starting with the condition at the top that we are to do these things while
we do not terminate the window itself.

So inside the while loop, once the condition is passes we enter it and we declare the clear color
on the screen which this function in this case takes RGBA values as float values.
These values go from 0.0f to 1.0f. Final value is the alpha value which indicates the opaqueness of each pixel.

Now this glClear function uses a buffer because taht is how OpenGL works namely. 
This buffer's responsibility is to clear color, this is what is being displayed to us back on the screen.

Without this function we are setting the color using glClearColor function, but nothing gets displayed.
This is because OpenGL needs a buffer that will display these colors to the screen. Those colors are stored in the buffer
and then displayed. So one setting is for setting the colors and the other one is fo actually displaying them.


Now for the next part that we need is the following. We will need to include some additional files.
We will need to include OpenGL now:
                    #include <OpenGL/gl3.h> 

Do not use          #include <GL/gl.h>     because this is the older version of OpenGL
and we need to use the latest one for working on this project, and unless you really need to use older versions 
I suggest sticking to the latest ones usually.

We also need to include standard library functions as well, which are:
                    #include <stdio.h> - for FIFO, printing, scaning input and output
                    #include <stdlib.h> - used for being able to malloc and free memory if needed to dynamically reserve it
                    #include <string.h> - used for various string manipulations that are being done.


Now we can try to begin drawing some triangles on the screen. For start we will try to draw a single one.
For this we need to use vertices and vertices are just a single point declared somewhere in sapce that consists of coordinates.
For 2D it requires 2 cordinates that is x and y and namely depending on how many vertices we will have
We will need many of these (x, y) floating point numbers. Now these values go from -1.0 to 1.0
and the reason for that is because they are normalized, we are working in NDC a normalized device coordinates.
To not get too deep into it what ends up happenig is the following. We want to be in the NDC space for drawing.
The reason for that is the following: After our vertex data which will be stored in an array of floating point numbers.
After that goes through the vertex shader and transformation pipeline(model, view, projection), it ends up in
clip space. And then OpenGL automatically divides that by w and this ends up in NDC space and in this space
the x (right) = 1.0 and x (left) = -1.0, y (bottom) = -1.0 and y (top) = 1.0, and finally in 3D the z (near) = -1.0 and
z (far) = 1.0 and this is mainly used for depth and so forth.

Now what is a VBO to mention it again it is a vertex buffer object. We define this because this is what will store our vertex data.
This data is raw and it contains vertex positions the one we just described, normals, texture coordinates as this too can be given to the buffer
and so forth. This is necessary because this buffer will be passed directly to the GPU memory, mainly because it is fast.
So when drawing happens the GPU now has all the data needed to draw things for us on the screen and it can do it fast because it has it already
in the memory via this VBO buffer.

Now what is a VAO which stands for vertex array object. This is configuration object that tells the GPU how to read
data from the VBO. Which attributes go where and so forth.

Now what are shaders. Shaders are small programs running on the GPU that control how our 3D data becomes pixels on the screen
essentially. This is what draws basically all of our data. We have the vertex shaders and these run once per vertex
and they take the vertex from the VBO and output that position in NDC space.
This can also pass data to the fragment shader which is like color and texture.

Now this fragment shader runs also once per pixel and it outputs a final color to that pixel.

So now that we know some of the theory without getting too much into it, we can now start coding somethin to get 
really something drawn on the screen.

We define an array of vertices using an array named GLfloat data type and we already write them
so that they will be in NDC space.

Now we need to write some shaders on our own since nothing comes with default configuration
that is already predefined for everything. For this sole reason we will need to write them ourselves.

Since they are small programs and based off of everything we have said, we will need two types of shader files.
One is a vertex shader file and one is a fragment shader file. Vertex one determines the layout and this is like a small configuration,
that tells the gpu where to draw them on the screen, like a config. And a fragment shader tells the gpu how to fill each pixel with what color.

So we create a new shader.h a header file for declaring a prototype function with which we will read into the buffer
the contents of that file that we can give then the GPU as part of teh configuration so that it knows how to work and draw.

We define these shader files as plain text files into shaders/ folder. We create one for the vertex and one for the fragment shader.

Why they are needed? Well the VBO that we discussed is a buffer that will be given to teh GPU memory and it contains
all of the necessary raw vertex data, but the shader programs that we write need to be compiled by the OpenGL to the GPU shader
and they are necessary because they are a configuration on how to draw things. Since we don't have anymore things being predetermined,
then we need to specify everything ourselves. So this buffer shader that reads the file contents is what we need because there it is specified how to draw.


One of the functions that we wrote is to read a shader source and we read the contents of our shader plain txt into a buffer
and we can use that source buffer that now contains that shader information to compile it.

For this we need another function we call compile_shader:

                    GLuint compile_shader(const char *source, GLenum type);

This GLenum type is the type of a shader it is either a vertex or a fragment shader and we specify which one it is that we need.
The source here is the buffer that we are using which has the stored shader configuration.

Final step in all of this gruseome work but fun learning is that we need one more final function
which will create the shader program that our GPU can use now. Because at the current state they will be compiled, but not fully
ready for the GPU just yet, and in this function we are going to make them ready!

So we started off raw with plain shader txt indicating how to draw and how to shade pixels.
We store that inside the buffer and that buffer now contains all teh information in a form of a string.

Then we successfully writtena a compile function that compiles that source buffer string that contains shader text
into if successful a shader ID that we finally need to create a shader program out of.

So this function lets call it the following way:
                    GLuint create_shader_program(GLuint vertexShader, GLuint fragmentShader);

What this function needs to do first of all needs to return the program ID on success or 0 on failure.
It is responsible for creating the program and attaching the so called shader to that program. And once all of that is done
successfully, we then have successfully created a program that we can give to the GPU and it contains everything for it necessary
to create vertices and pixels and what not.

So finally we are done, with only trying to write on the screen, I mean print adn have the GPU draw for us a triangle on the screen.

So we started off using glfw which is a library compatible with OpenGL that enables us to create a window, and handle
mouse inputs, audio, file inputs and all of that. With this we can manage the window we have created.
After that we decided to draw a triangle on the screen and for this we need a library with which we can do 3D graphics drawing
and so we decided to use OpenGL, but very soon at the start we ran into an issue on macOS and that issue is that the OpenGL
is being deprecated for Apple's Metal API which is their main one. So we needed to place something called glfwWindowHint
and actually tell it to use Major 4 and Minor 1 versions which is 4.1, also use the core profile pipeline as well and also something that is 
only mac specific required and that allows us to use core profile on macOS.

It all begins with the initialization so we initialize the glfw library, after that we create a glfwWindow pointer to that struct.
We give it the specifics such as HEIGHT WIDTH, title. We then bind that window instance to this, meaning that glfw uses that specific window
context. I have also used a GLubyte to print the version of the OpenGL that is being used,
correctly so in the terminal when running the program it prints OpenGL 4.1 Apple Metal, as it should print.

Then comes the part where we need to actually draw something and this is a rather complex process
that I would try to break down into some steps. First of all we will need to create something called a vertex buffer object (VBO)
and vertex array object (VAO). Now what these things are is the following. The vertex buffer object is just a thing an object
that is used to store raw vertex data like it's position (coordinates, texture values and etc). For this we need to have vertices
and these vertices contain coordinates and the coordinates are so called NDC and so
normalized device coordinates that can hold values from -1.0f to 1.0f, anything else is going to be clipped because this is how OpenGL works.

We also need to have a VAO and this object vertex is responsible for signaling how the vertex data from VBO
needs to be read and how many vertices at a time, which value are they and so forth...

So we need to setup those up, we generate those buffers, we bind them to the GL_BUFFER_ARRAY and give it basically this config
that tells it how it needs to be drawn. The GPU handles the drawing so...

After that we create a while loop that will run until the window is not closed.
In there we create a ClearColor pallette with which we draw the background color of the application.

                glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
                glClear(GL_COLOR_BUFFER_BIT);

                glUseProgram(shaderProgram);
                glBindVertexArray(vao);
                glDrawArrays(GL_TRIANGLES, 0, 3);

                glfwSwapBuffers(window);

                glfwPollEvents();


Now all these functions we will come back to them, but essential these first two lines are responsible for drawing background color.
First one defines the RGBA coloring and the second one displays basically those colors. With the first we set them
and second function draws them. These other functions we will get to them.

Lets go back for a second to understand how the drawing happens the traingle drawing. It all stems from vertices.
These are points from which the drawing will happen. in normalized space which we used we have this as coordinates in 2D:

                    GLfloat vertices[] = {
                        -0.5f, -0.5f,                        // Bottom left
                         0.5f, -0.5f,                        // right bottom
                         0.0f,  0.5f                         // top center
                    };

These coordinates are going to be given to the VBO. VAO just handles how many coordinates here are part of 1 vertex. How many 
there are and so forth...

Now we come to the part about shaders and what they are. So shaders are small programs that are responsible for drawing things that we need
on the screen. There is a vertex shader adn a fragment shader. The vertex shader is a program that draws the vertices, we need to create a
configuration that specifies how it will draw things, and we need a fragment shader that specifies how each pixel will be processed.
Each shader processes one vertex at a time. So one shader per vertex and per pixel. These shaders are what we need to give th GPU
in order for the GPU to know how to draw, and it will handle the rest.

Now as for shaders, we need to do the following. It used to be so that shaders and shader programs were being handled automatically from the
OpenGL library, it's implementation was unknown and it was all good, but now with these modern versions
we need to define the shader configs on our own. So we define them on our own. For this we create a directory
called shaders/ and inside we make one vertex shader config and one fragment shader config.

Here is the vertex one:
                    #version 410 core

                    layout(location = 0) in vec2 aPos;

                    void main() {
                        gl_Position = vec4(aPos, 0.0, 1.0);
                    }


here is the fragment one:
                    
                    #version 410 core

                    out vec4 FragColor;

                    void main() {
                        FragColor = vec4(0.9, 0.2, 0.3, 1.0);     // some sort of redish color
                    }

Now what all this means is how things will be drawn. We first give ita  version.
We then specify to him that look we want you to take vec2 that means it has 2 coordinate per vertice.
After that he transforms that into a 4D homogenous vector for the OpenGL.
OpenGL wants the vec4 it needs that one to work with and that one takes x,y,z,w coordinates.
And we finally get a NDC we place into that space that normalized space where it has values form -1 to 1.

Similra thing happens in the fragment shader:
We define a variable for the final write out of the pixel.

Basically these shaders are needed you need to write them because they run on the GPU and tell the GPU
how to draw stuff and how to colorize them if that makes sense.

-- Will come back to this part --









Later now we decided to move a bit further and instead of hardcoding things into the program
like our vertices coordinates we made a .obj file in which we created the following:
                        v -0.5 -0.5 0.8
                        v  0.5 -0.5 0.2
                        v  0.0  0.5 0.8

                        f 1 2 3

Here we defined 3 vertices and each having x y and z coordinates. The f stands for take 1 vertice and 2nd then 3rd.
So indexing here start from 1! and not 0!

Also we then created a Model structure that will contain vertices an array of floats that we will load into from this
file. And we created a counter to keep track as we dynamically allocate memory for that buffer that holds those vertices.
We then loaded that into the VBO instead of the regular vertices that were hardcoded.

Lastly we did we added the model view and projection. Now namely what this does it we want our 3D triangle to appear 3D.
Even if we are passinf 3D coordinates on our screen it doesnt appear 3D it appears flat. What is happening?

Well we need to add into account the lighting and projection and the view. Something that involved linear algebra.

So the model transforms our object in its own world. The view then moves the and rotates the world to match
your camera view and the projection just projects those 3D coordinates into flat 2D screen space.

--- COME BACK LATER AND FINISH ALL









I have started this Model Viewer with the plan and intention on building a model viewer for teh Half Life 1 mdl files.
The goal was to try to learn as much as possible on how to do this, and this is my documentation process along the way.

Goal is always knowledge and learning new things along the way so that is what I want to try to do.











