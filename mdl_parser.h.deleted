/*
 * MDL Parser - Header validation and structure parsing
 * Following SamVanheer's robust validation approach from Half-Life Asset Manager
 * 
 * This module safely parses MDL file headers and validates all structure offsets
 * to prevent buffer overruns and crashes when accessing model data.
 */

#ifndef MDL_PARSER_H
#define MDL_PARSER_H

#include "../studio.h"
#include "mdl_loader.h"
#include <stdio.h>
#include <stddef.h>
#include <stdbool.h>

// Extended error codes for parsing
typedef enum
{
    MDL_PARSE_SUCCESS = 0,
    MDL_PARSE_ERROR_INVALID_HEADER,
    MDL_PARSE_ERROR_INVALID_OFFSET,
    MDL_PARSE_ERROR_BOUNDS_CHECK_FAILED,
    MDL_PARSE_ERROR_INVALID_COUNT,
    MDL_PARSE_ERROR_CORRUPTED_DATA
} mdl_parse_result_t;

// Parsed MDL data structure
typedef struct
{
    // Raw file data
    unsigned char       *file_data;
    size_t              file_size;
    
    // Parsed header
    studiohdr_t         *header;
    
    // Validation flags
    bool                header_validated;
    bool                bodyparts_validated;
    bool                textures_validated;
    
    // Quick access pointers (set after validation)
    mstudiobodypart_t   *bodyparts;
    mstudiomodel_t      **models;           // Array of model pointers
    mstudiotexture_t    *textures;
    
    // Model statistics
    int                 total_triangles;
    int                 total_vertices;
    int                 total_models;
    
} mdl_data_t;

// ============================================================================
// HEADER VALIDATION FUNCTIONS
// Following SamVanheer's "better check to detect" philosophy
// ============================================================================

/**
 * Parse and validate the main MDL header
 * Checks magic, version, file size, and all offset bounds
 */
mdl_parse_result_t parse_mdl_header(mdl_data_t *mdl_data, 
                                    unsigned char *file_data, 
                                    size_t file_size);

/**
 * Validate that an offset and count are within file bounds
 * This is the core function that prevents buffer overruns
 */
bool validate_offset_bounds(size_t offset, size_t element_size, 
                           size_t count, size_t file_size);

/**
 * Validate all header offset fields point to valid data
 * Checks bodyparts, textures, sequences, etc.
 */
mdl_parse_result_t validate_header_offsets(const studiohdr_t *header, 
                                          size_t file_size);

/**
 * Print detailed header information for debugging
 * Similar to SamVanheer's detailed logging
 */
void print_header_info(const studiohdr_t *header);

// ============================================================================
// STRUCTURE PARSING FUNCTIONS  
// ============================================================================

/**
 * Parse and validate all bodyparts in the model
 * Sets up quick access pointers for safe iteration
 */
mdl_parse_result_t parse_bodyparts(mdl_data_t *mdl_data);

/**
 * Parse and validate all models within bodyparts
 * Creates array of model pointers for easy access
 */
mdl_parse_result_t parse_models(mdl_data_t *mdl_data);

/**
 * Parse and validate texture information
 * Validates texture offsets and dimensions
 */
mdl_parse_result_t parse_textures(mdl_data_t *mdl_data);

/**
 * Get a specific model safely with bounds checking
 * Returns NULL if indices are invalid
 */
mstudiomodel_t* get_model_safe(const mdl_data_t *mdl_data, 
                              int bodypart_index, 
                              int model_index);

/**
 * Calculate total statistics for the loaded model
 * Counts triangles, vertices, etc. for validation
 */
void calculate_model_stats(mdl_data_t *mdl_data);

// ============================================================================
// CLEANUP FUNCTIONS
// ============================================================================

/**
 * Initialize MDL data structure
 */
void init_mdl_data(mdl_data_t *mdl_data);

/**
 * Clean up allocated MDL data
 */
void cleanup_mdl_data(mdl_data_t *mdl_data);

/**
 * Get human-readable error string
 */
const char* get_parse_error_string(mdl_parse_result_t result);

#endif // MDL_PARSER_H
